#!/bin/sh
# 
# credits
# etl.std@gmail.com



MPATH="/private/tmp/ram"

info() {
	name="$1"
	dev="$2"
	mpoint="$3"
	printf '* %-15s %-25s --> %-15s\n' "$name" "$mpoint" "$dev"
}

get_list() { # returns names, devs, mpoints
	names=() devs=() mpoints=() n=0
	while read disk; do
		[ -z "$disk" ] && continue
		dev_mpoint=($disk)
		devs[$n]=${dev_mpoint[0]}
		mpoints[$n]=${dev_mpoint[2]}
		names[$n]=$(basename ${mpoints[$n]})
		n=$(($n+1))
	done <<< "$(mount | grep $MPATH'/')"
}

list() {
	echo "Base mount path: $MPATH"
	get_list
	echo "Ram disks ($n)"
	for i in ${!devs[*]}; do
		info "${names[$i]}" "${devs[$i]}" "${mpoints[$i]}" 
	done
}

find() { # return dev, mpoint
	name="$1"
	get_list
	unset dev; unset mpoint
	for i in ${!names[*]}; do
		if [[ "${names[$i]}" = $name ]]; then
			dev=${devs[$i]}
			mpoint=${mpoints[$i]}
			return 0
		fi
	done
	return 1
}

kill() {
	name="$1"
	find "$name"
	if [ $? -ne 0 ]; then
		echo "no such ram disk: $name"
		return 0
	fi
	echo "killing '$name' ..."
	_kill "$dev" "$mpoint"
	if [ $? -eq 0 ]; then
		echo 'ok!'
	else
		echo "error occured!"
	fi
}

_kill() {
	dev="$1"
	mpoint="$2"
	umount -f "$dev"
	hdiutil detach "$dev" > /dev/null
	[ -d "$mpoint" ] && rm -rf $mpoint
}

killall() {
	echo "killing all..."
	get_list
	for i in ${!names[*]}; do
		_kill "${devs[$i]}" "${mpoints[$i]}"
	done
	echo "done"
}

create() {
	name="$1"
	size=$2
	
	find "$name"
	if [ $? -eq 0 ]; then
		echo "ram disk '$name' already exists!"
		return 1
	fi

	mpoint="$MPATH/$name"
	mkdir -p "$mpoint"
	size=$(($size*2048))

 	#dev=`hdik -drivekey system-image=yes -nomount ram://$rdsize`
	dev=$(hdiutil attach -nomount ram://$size)
	if [ $? -ne 0 ] ; then
		echo "error creating ram disk..."
		return 1
	fi
	newfs_hfs -v "$name" $dev
	mount -t hfs $dev $mpoint
	if [ $? -eq 0 ]; then
		info "$name" "$dev" "$mpoint"
		echo 'ok!'	
	else
		echo "error!"
	fi
}

if [ $# -eq 0 ]; then
	list
	exit 0
fi

if [[ "$1" = kill ]]; then
	if [ -z "$2" ]; then
		echo "no disk name supplied"
		exit 1
	fi
	kill $2 && exit

elif [[ "$1" = killall ]]; then
	killall
	exit

else
	if [[ "$2" =~ ^[0-9]+$ ]]; then
		create "$1" $2
	else
		echo "worong size: '$2'"
	fi
	exit
fi


cat << EOF
ram utility --
                    - lists ram disks
ram name size (MB)  - crates new ram disk
ram kill name       - kills specified disk
ram killall	        - kills all disks
EOF